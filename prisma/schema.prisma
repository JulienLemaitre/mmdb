// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Piece {
  id                String     @id @default(uuid())
  title             String
  composer          Person     @relation(fields: [composerId], references: [id]) // A piece have a unique composer ?? Is that ALWAYS the case ? (if not, we need to use a many-to-many relation)
  composerId        String
  yearOfComposition SmallInt
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  movements         Movement[] // A piece can have many movements
  sources           Source[] // A piece can have many sources
}

enum KEY {
  C
  D
  E
  F
  G
  A
  B
  C_SHARP
  D_SHARP
  F_SHARP
  G_SHARP
  A_SHARP
  C_FLAT
  D_FLAT
  E_FLAT
  F_FLAT
  G_FLAT
  A_FLAT
  B_FLAT
}
// ?? Does it need to be a ordered list of terms that could be more than two?
model TempoIndication {
  id             String   @id @default(uuid())
  baseTerm       String
  additionalTerm String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
model Movement {
  id                String          @id @default(uuid())
  title             String
  piece             Piece           @relation(fields: [pieceId], references: [id]) // A movement belongs to a single piece
  pieceId           String
  rank              Int
  key               KEY
  metreNumerator    SmallInt
  metreDenominator  SmallInt
  // ?? ComposedTimeSignature
  tempoIndication   TempoIndication @relation(fields: [tempoIndicationId], references: [id])
  tempoIndicationId String
  metronomeMarks    MetronomeMark[] // A movement can have many metronome marks
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([pieceId, rank])
}

enum SOURCE_TYPE {
  ORIGINAL_SCORE
  LETTER
  EDITION
}
model Source {
  id            String         @id @default(uuid())
  title         String
  piece         Piece          @relation(fields: [pieceId], references: [id])
  pieceId       String
  isComposerMM  Boolean
  type          SOURCE_TYPE
  link          String?
  year          SmallInt
  date          DateTime? // ?? Is this usefull ?
  contributions Contribution[] // A source can have many Contributions
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum CONTRIBUTION_ROLE {
  COMPOSER
  EDITOR
  TRANSLATOR
  TRANSCRIBER
  ARRANGER
  PUBLISHER
  OTHER
}
model Contribution {
  id        String            @id @default(uuid())
  source    Source            @relation(fields: [sourceId], references: [id])
  sourceId  String
  person    Person            @relation(fields: [personId], references: [id])
  personId  String
  role      CONTRIBUTION_ROLE
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Person {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  birthYear SmallInt
  deathYear SmallInt?
  // ?? nationality String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum BEAT_UNIT {
  WHOLE
  HALF
  DOTTED_HALF
  QUARTER
  DOTTED_QUARTER
  EIGHTH
  DOTTED_EIGHTH
  SIXTEENTH
  DOTTED_SIXTEENTH
  THIRTYSECOND
  DOTTED_THIRTYSECOND
  SIXTYFOURTH
  DOTTED_SIXTYFOURTH
  HUNDREDTWENTYEIGHTH
  DOTTED_HUNDREDTWENTYEIGHTH
}

model MetronomeMark {
  id         String    @id @default(uuid())
  source     Source    @relation(fields: [sourceId], references: [id])
  sourceId   String
  movement   Movement  @relation(fields: [movementId], references: [id])
  movementId String
  beatUnit   BEAT_UNIT
  bpm        Int
  // ?? bpmRange String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
