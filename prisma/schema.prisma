// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PIECE_CATEGORY {
  KEYBOARD
  CHAMBER_INSTRUMENTAL
  ORCHESTRAL
  VOCAL
  OTHER
}

model Piece {
  id                String         @id @default(uuid())
  title             String
  nickName          String?
  composer          Person         @relation(fields: [composerId], references: [id]) // A piece have a unique composer
  composerId        String
  yearOfComposition Int
  category          PIECE_CATEGORY
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  movements         Movement[] // A piece can have many movements
  sources           Source[] // A piece can have many sources

  @@unique([composerId, title])
}

model Movement {
  id        String    @id @default(uuid())
  piece     Piece     @relation(fields: [pieceId], references: [id]) // A movement belongs to a single piece
  pieceId   String
  rank      Int
  key       KEY
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sections  Section[] // A movement can have many sections

  @@unique([pieceId, rank])
}

model Section {
  id                         String           @id @default(uuid())
  movement                   Movement         @relation(fields: [movementId], references: [id])
  movementId                 String
  rank                       Int
  metreNumerator             Int
  metreDenominator           Int
  metreString                String
  fastestStructuralNoteValue NOTE_VALUE?
  fastestStacattoNoteValue   NOTE_VALUE?
  fastestOrnamentalNoteValue NOTE_VALUE?
  // ?? ComposedTimeSignature
  tempoIndication            TempoIndication? @relation(fields: [tempoIndicationId], references: [id])
  tempoIndicationId          String?
  metronomeMarks             MetronomeMark[] // A movement can have many metronome marks
  commentId                  String?          @unique
  comment                    Comment?         @relation(fields: [commentId], references: [id])
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt

  @@unique([movementId, rank])
}

model TempoIndication {
  id        String    @id @default(uuid())
  baseTerm  String    @unique
  // additionalTermAppend  String?
  // additionalTermPrepend String?
  sections  Section[] // A tempo indication can be used by many sections
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model MetronomeMark {
  id             String     @id @default(uuid())
  source         Source     @relation(fields: [sourceId], references: [id])
  sourceId       String
  beatUnit       NOTE_VALUE
  bpm            Int
  notesPerSecond Json? // Will not be used after data seeding
  noteValues     Json? // Will not be used after data seeding
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  section        Section    @relation(fields: [sectionId], references: [id])
  sectionId      String
  commentId      String?    @unique
  comment        Comment?   @relation(fields: [commentId], references: [id])
}

model Source {
  id             String          @id @default(uuid())
  title          String? // ?? Is it usefull ?
  piece          Piece           @relation(fields: [pieceId], references: [id]) // A source is linked to a single piece
  pieceId        String
  isComposerMM   Boolean         @default(false)
  type           SOURCE_TYPE
  link           String?
  year           Int
  references     Json? // Can be plateNumber, ISBN, ISMN, etc.
  contributions  Contribution[] // A source can have many Contributions
  metronomeMarks MetronomeMark[] // A source can have many metronome marks
  commentId      String?         @unique
  comment        Comment?        @relation(fields: [commentId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Contribution {
  id             String            @id @default(uuid())
  source         Source            @relation(fields: [sourceId], references: [id])
  sourceId       String
  person         Person?           @relation(fields: [personId], references: [id])
  personId       String?
  organization   Organization?     @relation(fields: [organizationId], references: [id])
  organizationId String?
  role           CONTRIBUTION_ROLE
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Need to add a constraint to ensure that one and only one of personId or organizationId is set
  // constraint person_org_xor check ((personId IS NOT NULL AND organizationId IS NULL) OR (organizationId IS NOT NULL AND personId IS NULL))
}

model Organization {
  id            String         @id @default(uuid())
  name          String         @unique
  contributions Contribution[] // An organization can have many contributions
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Person {
  id            String         @id @default(uuid())
  fullName      String         @unique
  firstName     String?
  lastName      String?
  birthYear     Int?
  deathYear     Int?
  compositions  Piece[] // A person can have compose many pieces
  contributions Contribution[] // A person can have many contributions
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  password  String
  firstName String
  lastName  String
  comments  Comment[] // A user can have many comments
}

model Comment {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  text          String
  user          User?          @relation(fields: [userId], references: [id])
  userId        String?
  source        Source?
  section       Section?
  metronomeMark MetronomeMark?
}

enum NOTE_VALUE {
  WHOLE
  HALF
  DOTTED_HALF
  QUARTER
  DOTTED_QUARTER
  EIGHTH
  DOTTED_EIGHTH
  SIXTEENTH
  DOTTED_SIXTEENTH
  THIRTYSECOND
  DOTTED_THIRTYSECOND
  SIXTYFOURTH
  DOTTED_SIXTYFOURTH
  HUNDREDTWENTYEIGHTH
  DOTTED_HUNDREDTWENTYEIGHTH
  TRIPLET_EIGHTH
  TRIPLET_SIXTEENTH
  QUADRUPLET_EIGHTH
  QUINTUPLET_SIXTEENTH
  QUINTUPLET_THIRTYSECOND
  SEXTUPLET_SIXTEENTH
  SEXTUPLET_THIRTYSECOND
  SEPTUPLET_SIXTEENTH
  SEPTUPLET_HUNDREDTWENTYEIGHTH
}

enum KEY {
  A_FLAT_MAJOR
  A_FLAT_MINOR
  A_MAJOR
  A_MINOR
  A_SHARP_MAJOR
  A_SHARP_MINOR
  B_FLAT_MAJOR
  B_FLAT_MINOR
  B_MAJOR
  B_MINOR
  C_FLAT_MAJOR
  C_FLAT_MINOR
  C_MAJOR
  C_MINOR
  C_SHARP_MAJOR
  C_SHARP_MINOR
  D_FLAT_MAJOR
  D_FLAT_MINOR
  D_MAJOR
  D_MINOR
  D_SHARP_MAJOR
  D_SHARP_MINOR
  E_FLAT_MAJOR
  E_FLAT_MINOR
  E_MAJOR
  E_MINOR
  F_FLAT_MAJOR
  F_FLAT_MINOR
  F_MAJOR
  F_MINOR
  F_SHARP_MAJOR
  F_SHARP_MINOR
  G_FLAT_MAJOR
  G_FLAT_MINOR
  G_MAJOR
  G_MINOR
  G_SHARP_MAJOR
  G_SHARP_MINOR
}

enum SOURCE_TYPE {
  ORIGINAL_SCORE
  LETTER
  EDITION
}

enum CONTRIBUTION_ROLE {
  COMPOSER
  EDITOR
  TRANSLATOR
  TRANSCRIBER
  ARRANGER
  PUBLISHER
  OTHER
}
