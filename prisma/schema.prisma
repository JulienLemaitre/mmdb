// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PIECE_CATEGORY {
  KEYBOARD
  CHAMBER_INSTRUMENTAL
  ORCHESTRAL
  VOCAL
}

model Piece {
  id                String         @id @default(uuid())
  title             String
  nickName          String?
  composer          Person         @relation(fields: [composerId], references: [id]) // A piece have a unique composer ?? Is that ALWAYS the case ? (if not, we need to use a many-to-many relation)
  composerId        String
  yearOfComposition Int // ?? Will we NEVER want more precise date ?
  category          PIECE_CATEGORY
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  movements         Movement[] // A piece can have many movements
  sections          Section[] // A piece can have many sections
  sources           Source[] // A piece can have many sources

  @@unique([composerId, title])
}

enum KEY {
  A_FLAT_MAJOR
  A_FLAT_MINOR
  A_MAJOR
  A_MINOR
  A_SHARP_MAJOR
  A_SHARP_MINOR
  B_FLAT_MAJOR
  B_FLAT_MINOR
  B_MAJOR
  B_MINOR
  C_FLAT_MAJOR
  C_FLAT_MINOR
  C_MAJOR
  C_MINOR
  C_SHARP_MAJOR
  C_SHARP_MINOR
  D_FLAT_MAJOR
  D_FLAT_MINOR
  D_MAJOR
  D_MINOR
  D_SHARP_MAJOR
  D_SHARP_MINOR
  E_FLAT_MAJOR
  E_FLAT_MINOR
  E_MAJOR
  E_MINOR
  F_FLAT_MAJOR
  F_FLAT_MINOR
  F_MAJOR
  F_MINOR
  F_SHARP_MAJOR
  F_SHARP_MINOR
  G_FLAT_MAJOR
  G_FLAT_MINOR
  G_MAJOR
  G_MINOR
  G_SHARP_MAJOR
  G_SHARP_MINOR
}

// ?? Does it need to be a ordered list of terms that could be more than two?
model TempoIndication {
  id        String    @id @default(uuid())
  baseTerm  String    @unique
  // additionalTermAppend  String?
  // additionalTermPrepend String?
  sections  Section[] // A tempo indication can be used by many sections
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Section {
  id                    String          @id @default(uuid())
  movement              Movement?       @relation(fields: [movementId], references: [id])
  movementId            String?
  piece                 Piece?          @relation(fields: [pieceId], references: [id]) // A section belongs to a single piece
  pieceId               String?
  rank                  Int
  metreNumerator        Int
  metreDenominator      Int
  metreString           String
  fastestStructuralNote BEAT_UNIT?
  fastestStacattoNote   BEAT_UNIT?
  fastestOrnamentalNote BEAT_UNIT?
  // ?? ComposedTimeSignature
  tempoIndication       TempoIndication @relation(fields: [tempoIndicationId], references: [id])
  tempoIndicationId     String
  metronomeMarks        MetronomeMark[] // A movement can have many metronome marks
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Need to add a constraint to ensure that one and only one of pieceId or movementId is set
  // constraint section_piece_or_movement check ((personId IS NOT NULL AND organizationId IS NULL) OR (organizationId IS NOT NULL AND personId IS NULL))
  @@unique([movementId, rank])
  @@unique([pieceId, rank])
}

model Movement {
  id        String    @id @default(uuid())
  piece     Piece     @relation(fields: [pieceId], references: [id]) // A movement belongs to a single piece
  pieceId   String
  rank      Int
  key       KEY
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sections  Section[]

  @@unique([pieceId, rank])
}

enum SOURCE_TYPE {
  ORIGINAL_SCORE
  LETTER
  EDITION
}

model Source {
  id             String          @id @default(uuid())
  title          String?
  pieces         Piece[] // A source can contain many pieces [implicit many-to-many relation]
  isComposerMM   Boolean         @default(false)
  type           SOURCE_TYPE
  link           String?
  year           Int
  // TODO: Maybe a "references" field with a json object would be better, permitting to store different types of references
  plate_number   String?         @unique
  // date           DateTime? // ?? Is this usefull ?
  contributions  Contribution[] // A source can have many Contributions
  metronomeMarks MetronomeMark[] // A source can have many metronome marks
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum CONTRIBUTION_ROLE {
  COMPOSER
  EDITOR
  TRANSLATOR
  TRANSCRIBER
  ARRANGER
  PUBLISHER
  OTHER
}

model Contribution {
  id             String            @id @default(uuid())
  source         Source            @relation(fields: [sourceId], references: [id])
  sourceId       String
  person         Person?           @relation(fields: [personId], references: [id])
  personId       String?
  organization   Organization?     @relation(fields: [organizationId], references: [id])
  organizationId String?
  role           CONTRIBUTION_ROLE
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Need to add a constraint to ensure that on and only one of personId or organizationId is set
  // constraint person_org_xor check ((personId IS NOT NULL AND organizationId IS NULL) OR (organizationId IS NOT NULL AND personId IS NULL))
}

model Organization {
  id            String         @id @default(uuid())
  name          String
  contributions Contribution[] // An organization can have many contributions
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Person {
  id            String         @id @default(uuid())
  fullName      String         @unique
  firstName     String?
  lastName      String?
  birthYear     Int?
  deathYear     Int?
  compositions  Piece[] // A person can have compose many pieces
  contributions Contribution[] // A person can have many contributions
  // ?? nationality String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum BEAT_UNIT {
  WHOLE
  HALF
  DOTTED_HALF
  QUARTER
  DOTTED_QUARTER
  EIGHTH
  DOTTED_EIGHTH
  SIXTEENTH
  DOTTED_SIXTEENTH
  THIRTYSECOND
  DOTTED_THIRTYSECOND
  SIXTYFOURTH
  DOTTED_SIXTYFOURTH
  HUNDREDTWENTYEIGHTH
  DOTTED_HUNDREDTWENTYEIGHTH
}

model MetronomeMark {
  id             String    @id @default(uuid())
  source         Source    @relation(fields: [sourceId], references: [id])
  sourceId       String
  beatUnit       BEAT_UNIT
  bpm            Int
  // ?? bpmRange String[]
  notesPerSecond Json?
  notes          Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Section        Section   @relation(fields: [sectionId], references: [id])
  sectionId      String
}
