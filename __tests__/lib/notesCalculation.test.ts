import { getNotesPerSecondsFromNotes, getNotesFromNotesPerSecond } from '@/lib/notesCalculation'
import {NOTE_VALUE} from "@prisma/client";

describe('getNotesFromNotesPerSecond', () => {
  test('QUARTER = 60 / 1 nps => QUARTER', () => {
    const res = getNotesFromNotesPerSecond({ metronomeMark: { beatUnit: 'QUARTER', bpm: 60, notesPerSecond: { fastestStructuralNote: 1 } } })

    expect(res.fastestStructuralNote).toEqual('QUARTER')
  })
  test('QUARTER = 60 / 2 nps => EIGHTH', () => {
    const res = getNotesFromNotesPerSecond({ metronomeMark: { beatUnit: 'QUARTER', bpm: 60, notesPerSecond: { fastestStructuralNote: 2 } } })

    expect(res.fastestStructuralNote).toEqual('EIGHTH')
  })
  test('QUARTER = 60 / 3 nps => TRIPLET_EIGHTH', () => {
    const res = getNotesFromNotesPerSecond({ metronomeMark: { beatUnit: 'QUARTER', bpm: 60, notesPerSecond: { fastestStructuralNote: 3 } } })

    expect(res.fastestStructuralNote).toEqual('TRIPLET_EIGHTH')
  })
})

describe('getNotesPerSecondsFromNotes', () => {
  test('QUARTER = 60 / 1 nps => QUARTER', () => {
    const res = getNotesPerSecondsFromNotes({ metronomeMark: { beatUnit: 'QUARTER', bpm: 60 }, section: { fastestStructuralNote: 'QUARTER' } })

    expect(res.fastestStructuralNote).toEqual(1)
  })
  test('QUARTER = 60 / 2 nps => EIGHTH', () => {
    const res = getNotesPerSecondsFromNotes({ metronomeMark: { beatUnit: 'QUARTER', bpm: 60 }, section: { fastestStructuralNote: 'EIGHTH' } })

    expect(res.fastestStructuralNote).toEqual(2)
  })
  test('QUARTER = 60 / 3 nps => TRIPLET_EIGHTH', () => {
    const res = getNotesPerSecondsFromNotes({ metronomeMark: { beatUnit: 'QUARTER', bpm: 60 }, section: { fastestStructuralNote: 'TRIPLET_EIGHTH' } })

    expect(res.fastestStructuralNote).toEqual(3)
  })
})

// notesCalculation.test.ts - Generated by CodiumAI

/*
Code Analysis:
- The main goal of the function is to convert a given metronome mark into the fastest possible notes for different types of musical notes.
- It takes in a metronome mark object that contains the beat unit, bpm, and notes per second.
- It checks if the notes per second property exists, and throws an error if it doesn't.
- It extracts the fastest notes per second for different types of notes (structural, staccato, and ornamental) from the notes per second object.
- It loops through the notes per second object and converts the raw value of notes per second to a number.
- It calls the getNote function with the notes per second, beat unit, and bpm to get the fastest possible note value.
- If the getNote function throws an error, it sets the note value to null.
- It returns an object that contains the fastest possible note value for each type of note.
*/

/*
Test Plan:
- test_valid_notes: tests that the function returns an object containing the fastest possible note value for each type of note when given a valid metronome mark object. Tags: [happy path]
- test_missing_notesPerSecond: tests that the function throws an error when the notesPerSecond property is missing from the metronome mark object. Tags: [edge case]
- test_missing_fastestNotes: tests that the function throws an error when none of the fastest notes per second properties are present in the notesPerSecond object. Tags: [edge case]
- test_getNote_called_correctly: tests that the function calls the getNote function with the correct parameters to get the fastest possible note value. Tags: [general behavior]
- test_getNote_throws_error: tests that the function sets the note value to null when the getNote function throws an error. Tags: [general behavior]
- test_notesPerSecond_contains_parentheses: tests that the function only keeps the value before the parentheses when the notesPerSecondRawValue contains a string with parentheses. Tags: [general behavior]
- test_notesPerSecondRawValue_not_valid_number: tests that the function handles cases where the notesPerSecondRawValue is not a valid number. Tags: [edge case]
- test_notesPerSecondRawValue_negative_number: tests that the function handles cases where the notesPerSecondRawValue is a negative number. Tags: [edge case]
- test_notesPerSecondRawValue_contains_letters: tests that the function handles cases where the notesPerSecondRawValue contains letters. Tags: [edge case]
- test_notesPerSecondRawValue_contains_special_characters: tests that the function handles cases where the notesPerSecondRawValue contains special characters. Tags: [edge case]
*/



describe('getNotesFromNotesPerSecond_function', () => {
  test("test_valid_notes", () => {
    const metronomeMark = {
      beatUnit: NOTE_VALUE.QUARTER,
      bpm: 120,
      notesPerSecond: {
        fastestStructuralNote: "1/16",
        fastestStacattoNote: "1/32",
        fastestOrnamentalNote: "1/64"
      }
    }
    const expectedNotes = {
      fastestStructuralNote: NOTE_VALUE.SIXTEENTH,
      fastestStacattoNote: NOTE_VALUE.THIRTYSECOND,
      fastestOrnamentalNote: NOTE_VALUE.SIXTYFOURTH
    }
    expect(getNotesFromNotesPerSecond({metronomeMark})).toEqual(expectedNotes)
  })
  test("test_missing_notesPerSecond", () => {
    const metronomeMark = {
      beatUnit: NOTE_VALUE.QUARTER,
      bpm: 120
    }
    // @ts-ignore
    expect(() => getNotesFromNotesPerSecond({metronomeMark})).toThrowError("No notesPerSecond property found in given section")
  })
  test("test_missing_fastestNotes", () => {
    const metronomeMark = {
      beatUnit: NOTE_VALUE.QUARTER,
      bpm: 120,
      notesPerSecond: {}
    }
    expect(() => getNotesFromNotesPerSecond({metronomeMark})).toThrowError()
  })
  test("test_getNote_called_correctly", () => {
    const getNoteMock = jest.fn().mockReturnValue(NOTE_VALUE.SIXTEENTH)
    const metronomeMark = {
      beatUnit: NOTE_VALUE.QUARTER,
      bpm: 120,
      notesPerSecond: {
        fastestStructuralNote: "1/16"
      }
    }
    getNotesFromNotesPerSecond({metronomeMark, getNoteMock})
    expect(getNoteMock).toHaveBeenCalledWith({notesPerSecond: 8, beatUnit: NOTE_VALUE.QUARTER, bpm: 120})
  })
  test("test_getNote_throws_error", () => {
    const getNoteMock = jest.fn().mockImplementation(() => {
      throw new Error("Error in getNote function")
    })
    const metronomeMark = {
      beatUnit: NOTE_VALUE.QUARTER,
      bpm: 120,
      notesPerSecond: {
        fastestStructuralNote: "1/16"
      }
    }
    const expectedNotes = {
      fastestStructuralNote: null
    }
    expect(getNotesFromNotesPerSecond({metronomeMark, getNoteMock})).toEqual(expectedNotes)
  })
  test("test_notesPerSecond_contains_parentheses", () => {
    const metronomeMark = {
      beatUnit: NOTE_VALUE.QUARTER,
      bpm: 120,
      notesPerSecond: {
        fastestStructuralNote: "1/16 (staccato)"
      }
    }
    const expectedNotes = {
      fastestStructuralNote: NOTE_VALUE.SIXTEENTH
    }
    expect(getNotesFromNotesPerSecond({metronomeMark})).toEqual(expectedNotes)
  })
})
