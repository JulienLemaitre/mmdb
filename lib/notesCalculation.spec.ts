// Generated by CodiumAI

import {NOTE_VALUE} from "@prisma/client";
import {getNotesPerSecondFromNotePerBar} from "@/lib/notesCalculation";

describe('getNotesPerSecondFromNotePerBar', () => {

    // Tests that the function correctly calculates the number of notes per second for a quarter note in a 4/4 time signature with 120 bpm
    it('should calculate the correct number of notes per second for a quarter note in a 4/4 time signature with 120 bpm', () => {
      const notesPerBar = 4;
      const meterNumerator = 4;
      const meterDenominator = 4;
      const bpm = 120;
      const beatUnit = NOTE_VALUE.QUARTER;

      const result = getNotesPerSecondFromNotePerBar({ notesPerBar, meterNumerator, meterDenominator, bpm, beatUnit });

      expect(result).toBeCloseTo(2, 1);
    });

    // Tests that the function correctly calculates the number of notes per second for a dotted eighth note in a 6/8 time signature with 80 bpm
    it('should calculate the correct number of notes per second for a dotted eighth note in a 6/8 time signature with 80 bpm', () => {
      const notesPerBar = 3;
      const meterNumerator = 6;
      const meterDenominator = 8;
      const bpm = 80;
      const beatUnit = NOTE_VALUE.DOTTED_EIGHTH; // 3/16

      const result = getNotesPerSecondFromNotePerBar({ notesPerBar, meterNumerator, meterDenominator, bpm, beatUnit });

      expect(result).toBeCloseTo(1, 1);
    });

    // Tests that the function correctly calculates the number of notes per second for a triplet sixteenth note in a 3/4 time signature with 150 bpm
    it('should calculate the correct number of notes per second for a triplet sixteenth note in a 3/4 time signature with 150 bpm', () => {
      const notesPerBar = 3;
      const meterNumerator = 3;
      const meterDenominator = 4;
      const bpm = 150; // 0.4 seconds per beat
      const beatUnit = NOTE_VALUE.TRIPLET_SIXTEENTH; // 1/24

      const result = getNotesPerSecondFromNotePerBar({ notesPerBar, meterNumerator, meterDenominator, bpm, beatUnit });

      expect(result).toBeCloseTo(0.41, 1);
    });

    // Tests that the function throws an error if the notesPerBar parameter is missing or invalid
    it('should throw an error if the notesPerBar parameter is missing or invalid', () => {
      const meterNumerator = 4;
      const meterDenominator = 4;
      const bpm = 120;
      const beatUnit = NOTE_VALUE.QUARTER;

      expect(() => {
        // @ts-ignore
        getNotesPerSecondFromNotePerBar({ meterNumerator, meterDenominator, bpm, beatUnit });
      }).toThrowError("[gNPSFNPB] Invalid or missing parameter");
    });

    // Tests that the function throws an error if the meterNumerator parameter is missing or invalid
    it('should throw an error if the meterNumerator parameter is missing or invalid', () => {
      const notesPerBar = 4;
      const meterDenominator = 4;
      const bpm = 120;
      const beatUnit = NOTE_VALUE.QUARTER;

      expect(() => {
        // @ts-ignore
        getNotesPerSecondFromNotePerBar({ notesPerBar, meterDenominator, bpm, beatUnit });
      }).toThrowError("[gNPSFNPB] Invalid or missing parameter");
    });

    // Tests that the function throws an error if the bpm parameter is missing or invalid
    it('should throw an error if the bpm parameter is missing or invalid', () => {
      const notesPerBar = 4;
      const meterNumerator = 4;
      const meterDenominator = 4;
      const beatUnit = NOTE_VALUE.QUARTER;

      expect(() => {
        // @ts-ignore
        getNotesPerSecondFromNotePerBar({ notesPerBar, meterNumerator, meterDenominator, beatUnit });
      }).toThrowError("[gNPSFNPB] Invalid or missing parameter");
    });

});
