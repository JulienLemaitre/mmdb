import parseValueRemoveParenthesis from '@/lib/parseValueRemoveParenthesis';
// Generated by CodiumAI

describe('parseValueRemoveParenthesis', () => {

    // Tests that the function correctly removes everything after a potential open parenthesis from a string without parenthesis
    it('should return the input string without parenthesis', () => {
      const value = "Hello World";
      const result = parseValueRemoveParenthesis(value);
      expect(result).toBe("Hello World");
    });

    // Tests that the function correctly removes everything after a potential open parenthesis from a string with a single open parenthesis
    it('should remove everything after a potential open parenthesis from a string with a single open parenthesis', () => {
      const value = "Hello (World)";
      const result = parseValueRemoveParenthesis(value);
      expect(result).toBe("Hello");
    });

    // Tests that the function correctly removes everything after a potential open parenthesis from a string with multiple open parenthesis
    it('should remove everything after a potential open parenthesis from a string with multiple open parenthesis', () => {
      const value = "Hello (World) (Test)";
      const result = parseValueRemoveParenthesis(value);
      expect(result).toBe("Hello");
    });

    // Tests that the function correctly removes everything after a potential open parenthesis from a string with leading/trailing spaces
    it('should remove everything after a potential open parenthesis from a string with leading/trailing spaces', () => {
      const value = "   Hello (World)   ";
      const result = parseValueRemoveParenthesis(value);
      expect(result).toBe("Hello");
    });

    // Tests that the function returns the input value if it is not a string
    it('should return the input value if it is not a string', () => {
      const value = 123;
      const result = parseValueRemoveParenthesis(value);
      expect(result).toBe(123);
    });

    // Tests that the function returns the input value if it is an empty string
    it('should return the input value if it is an empty string', () => {
      const value = "";
      const result = parseValueRemoveParenthesis(value);
      expect(result).toBe("");
    });

});
