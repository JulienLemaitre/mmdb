// Generated by CodiumAI

import { NOTE_VALUE } from "@prisma/client";
import getNotesPerSecondFromNotesPerBar from "./getNotesPerSecondFromNotesPerBar";

describe("getNotesPerSecondFromNotesPerBar", () => {
  // Tests that the function correctly calculates the number of notes per second for a quarter note in a 4/4 time signature with 120 bpm
  it("should calculate the correct number of notes per second for a quarter note in a 4/4 time signature with 120 bpm", () => {
    const notesPerBar = 4;
    const metreNumerator = 4;
    const metreDenominator = 4;
    const bpm = 120;
    const beatUnit = NOTE_VALUE.QUARTER;

    const result = getNotesPerSecondFromNotesPerBar({
      notesPerBar,
      metreNumerator,
      metreDenominator,
      bpm,
      beatUnit,
    });

    expect(result).toBeCloseTo(2, 1);
  });

  // Tests that the function correctly calculates the number of notes per second for a dotted eighth note in a 6/8 time signature with 80 bpm
  it("should calculate the correct number of notes per second for a dotted eighth note in a 6/8 time signature with 80 bpm", () => {
    const notesPerBar = 3;
    const metreNumerator = 6;
    const metreDenominator = 8;
    const bpm = 80;
    const beatUnit = NOTE_VALUE.DOTTED_EIGHTH; // 3/16

    const result = getNotesPerSecondFromNotesPerBar({
      notesPerBar,
      metreNumerator,
      metreDenominator,
      bpm,
      beatUnit,
    });

    expect(result).toBeCloseTo(1, 1);
  });

  // Tests that the function throws an error if the notesPerBar parameter is missing or invalid
  it("should throw an error if the notesPerBar parameter is missing or invalid", () => {
    const metreNumerator = 4;
    const metreDenominator = 4;
    const bpm = 120;
    const beatUnit = NOTE_VALUE.QUARTER;

    expect(() => {
      // @ts-ignore
      getNotesPerSecondFromNotesPerBar({
        metreNumerator,
        metreDenominator,
        bpm,
        beatUnit,
      });
    }).toThrowError("[gNPSFNPB] Invalid or missing parameter");
  });

  // Tests that the function throws an error if the metreNumerator parameter is missing or invalid
  it("should throw an error if the metreNumerator parameter is missing or invalid", () => {
    const notesPerBar = 4;
    const metreDenominator = 4;
    const bpm = 120;
    const beatUnit = NOTE_VALUE.QUARTER;

    expect(() => {
      // @ts-ignore
      getNotesPerSecondFromNotesPerBar({
        notesPerBar,
        metreDenominator,
        bpm,
        beatUnit,
      });
    }).toThrowError("[gNPSFNPB] Invalid or missing parameter");
  });

  // Tests that the function throws an error if the bpm parameter is missing or invalid
  it("should throw an error if the bpm parameter is missing or invalid", () => {
    const notesPerBar = 4;
    const metreNumerator = 4;
    const metreDenominator = 4;
    const beatUnit = NOTE_VALUE.QUARTER;

    expect(() => {
      // @ts-ignore
      getNotesPerSecondFromNotesPerBar({
        notesPerBar,
        metreNumerator,
        metreDenominator,
        beatUnit,
      });
    }).toThrowError("[gNPSFNPB] Invalid or missing parameter");
  });
});
